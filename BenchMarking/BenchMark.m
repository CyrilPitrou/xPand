(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



SetDirectory["~/CMB"];


Block[{Print},
<<xAct/xPand.m;
]
$DefInfoQ=False;
SetOptions[AutomaticRules,Verbose->False];


(*DefConstantSymbol[d];*)
DefManifold[M,4(*d*),{\[Alpha],\[Beta],\[Gamma],\[Mu],\[Nu],\[Lambda],\[Sigma]}];
DefMetric[-1,g[-\[Alpha],-\[Beta]],CD,{";","\!\(\*OverscriptBox[\(\[Del]\), \(_\)]\)"},PrintAs->"\!\(\*OverscriptBox[\(g\), \(_\)]\)"];
SetSlicing[g,nM,hM,cdM,{"|","\!\(\*OverscriptBox[\(D\), \(_\)]\)"},"Minkowski"];
SetSlicing[g,n,h,cd,{"|","\!\(\*OverscriptBox[\(D\), \(_\)]\)"},"FLFlat"];
SetSlicing[g,n2,h2,cd2,{"|","\!\(\*OverscriptBox[\(D\), \(_\)]\)"},"FLCurved"];
SetSlicing[g,n3,h3,cd3,{"|","\!\(\*OverscriptBox[\(D\), \(_\)]\)"},"BianchiI"];
SetSlicing[g,n4,h4,cd4,{"|","\!\(\*OverscriptBox[\(D\), \(_\)]\)"},"BianchiB"];


DefMetricFields[g,dg,hM]
DefMatterFields[uf, duf,hM]

DefMetricFields[g,dg,h]
DefMatterFields[uf, duf,h]

DefMetricFields[g,dg,h2]
DefMatterFields[uf, duf,h2]

DefMetricFields[g,dg,h3]
DefMatterFields[uf, duf,h3]

DefMetricFields[g,dg,h4]
DefMatterFields[uf, duf,h4]


MyxPandBenchMark[expr_,h_,order_,gauge_]:=ToxPand[expr,dg,uf,duf,h, gauge, order]


ordermax=4


$OpenConstantsOfStructure=False;


TimingsxPert=Table[{i,First@AbsoluteTiming[ExpandPerturbation@Perturbed[Conformal[g,gah42][RicciScalarCD[]],i]//ContractMetric//ToCanonical]},{i,1,ordermax}]


TimingsMinkowski=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],hM,i,"NewtonGauge"]]},{i,1,ordermax}]
TimingsMinkowskiSynchronous=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],hM,i,"SynchronousGauge"]]},{i,1,ordermax}]
TimingsMinkowskiFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],hM,i,"FlatGauge"]]},{i,1,ordermax}]
TimingsMinkowskiComoving=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],hM,i,"ComovingGauge"]]},{i,1,ordermax}]
TimingsMinkowskiAny=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],hM,i,"AnyGauge"]]},{i,1,ordermax}]


TimingsFLFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h,i,"NewtonGauge"]]},{i,1,ordermax}]
TimingsFLFlatSynchronous=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h,i,"SynchronousGauge"]]},{i,1,ordermax}]
TimingsFLFlatFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h,i,"FlatGauge"]]},{i,1,ordermax}]
TimingsFLFlatComoving=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h,i,"ComovingGauge"]]},{i,1,ordermax}]
TimingsFLFlatAny=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h,i,"AnyGauge"]]},{i,1,ordermax}]


TimingsFLCurved=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h2,i,"NewtonGauge"]]},{i,1,ordermax}]
TimingsFLCurvedSynchronous=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h2,i,"SynchronousGauge"]]},{i,1,ordermax}]
TimingsFLCurvedFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h2,i,"FlatGauge"]]},{i,1,ordermax}]
TimingsFLCurvedComoving=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h2,i,"ComovingGauge"]]},{i,1,ordermax}]
TimingsFLCurvedAny=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h2,i,"AnyGauge"]]},{i,1,ordermax-1}]


TimingsBianchiI=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h3,i,"NewtonGauge"]]},{i,1,ordermax}]
TimingsBianchiISynchronous=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h3,i,"SynchronousGauge"]]},{i,1,ordermax}]
TimingsBianchiIFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h3,i,"FlatGauge"]]},{i,1,ordermax}]
TimingsBianchiIComoving=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h3,i,"ComovingGauge"]]},{i,1,ordermax}]
TimingsBianchiIAny=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h3,i,"AnyGauge"]]},{i,1,ordermax-1}]


TimingsBianchiB=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h4,i,"NewtonGauge"]]},{i,1,ordermax-1}]
TimingsBianchiBSynchronous=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h4,i,"SynchronousGauge"]]},{i,1,ordermax-2}]
TimingsBianchiBFlat=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h4,i,"FlatGauge"]]},{i,1,ordermax-1}]
TimingsBianchiBComoving=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h4,i,"ComovingGauge"]]},{i,1,ordermax-1}]
TimingsBianchiBAny=Table[{i,First@AbsoluteTiming[MyxPandBenchMark[RicciScalarCD[],h4,i,"AnyGauge"]]},{i,1,ordermax-2}]


FirstTime=True;


NameFileNewt=StringJoin["SaveTimingsNewtonGauge",ToString[ordermax],".dat"];
If[FirstTime,
Put[{TimingsxPert,TimingsMinkowski,TimingsFLFlat,TimingsFLCurved,TimingsBianchiI,TimingsBianchiB},NameFileNewt];,{TimingsxPert,TimingsMinkowski,TimingsFLFlat,TimingsFLCurved,TimingsBianchiI,TimingsBianchiB}=Get[NameFileNewt]]


NameFileSynchronous=StringJoin["SaveTimingsSynchronousGauge",ToString[ordermax],".dat"];
If[FirstTime,
Put[{TimingsxPert,TimingsMinkowskiSynchronous,TimingsFLFlatSynchronous,TimingsFLCurvedSynchronous,TimingsBianchiISynchronous,TimingsBianchiBSynchronous},NameFileSynchronous];,{TimingsxPert,TimingsMinkowskiSynchronous,TimingsFLFlatSynchronous,TimingsFLCurvedSynchronous,TimingsBianchiISynchronous,TimingsBianchiBSynchronous}=Get[NameFileSynchronous]]

NameFileFlat=StringJoin["SaveTimingsFlatGauge",ToString[ordermax],".dat"];
If[FirstTime,
Put[{TimingsxPert,TimingsMinkowskiFlat,TimingsFLFlatFlat,TimingsFLCurvedFlat,TimingsBianchiIFlat,TimingsBianchiBFlat},NameFileFlat];,{TimingsxPert,TimingsMinkowskiFlat,TimingsFLFlatFlat,TimingsFLCurvedFlat,TimingsBianchiIFlat,TimingsBianchiBFlat}=Get[NameFileFlat]]


NameFileComoving=StringJoin["SaveTimingsComovingGauge",ToString[ordermax],".dat"];
If[FirstTime,
Put[{TimingsxPert,TimingsMinkowskiComoving,TimingsFLFlatComoving,TimingsFLCurvedComoving,TimingsBianchiIComoving,TimingsBianchiBComoving},NameFileComoving];,{TimingsxPert,TimingsMinkowskiComoving,TimingsFLFlatComoving,TimingsFLCurvedComoving,TimingsBianchiIComoving,TimingsBianchiBComoving}=Get[NameFileComoving]]


NameFileAny=StringJoin["SaveTimingsAnyGauge",ToString[ordermax],".dat"];
If[FirstTime,
Put[{TimingsxPert,TimingsMinkowskiAny,TimingsFLFlatAny,TimingsFLCurvedAny,TimingsBianchiIAny,TimingsBianchiBAny},NameFileAny];,{TimingsxPert,TimingsMinkowskiAny,TimingsFLFlatAny,TimingsFLCurvedAny,TimingsBianchiIAny,TimingsBianchiBAny}=Get[NameFileAny]]



